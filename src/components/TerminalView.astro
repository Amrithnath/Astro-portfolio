---
import LsOutput from './LsOutput.astro';
import TreeOutput from './TreeOutput.astro';
import { homeDirectoryItems, getProjectItems } from '../data/navigation.ts';

// Terminal Theme View Component
export interface Props {
  title?: string;
  description?: string;
  projects?: any[];
  skills?: string[];
  techStack?: { [category: string]: string[] };
  contact?: {
    email?: string;
    github?: string;
    linkedin?: string;
  };
  achievements?: string[];
  terminal?: {
    recentCommands?: string[];
    systemInfo?: {
      uptime?: string;
      load?: string;
      processes?: number;
    };
  };
  stats?: {
    projectsCompleted?: number;
    technologiesUsed?: number;
    yearsOfExperience?: number;
    certifications?: number;
    awards?: number;
  };
  renderMode?: 'full' | 'minimal';
  fragmentOnly?: boolean;
  suppressHeader?: boolean;
  suppressAbout?: boolean;
  suppressBanner?: boolean;
  showFinalCursor?: boolean;
  includeFooter?: boolean;
}

const { 
  title = "Amrithnath Vijayakumar", 
  description = "Full-stack developer, gamer, and photographer",
  projects = [],
  skills = [],
  techStack = {},
  contact = {},
  achievements = [],
  terminal = {},
  stats = {},
  renderMode = 'full',
  fragmentOnly = false,
  suppressHeader = false,
  suppressAbout = false,
  suppressBanner = false,
  showFinalCursor = true,
  includeFooter = false
} = Astro.props;

const projectItems = getProjectItems(projects);
const randomAchievement = achievements.length > 0 ? achievements[Math.floor(Math.random() * achievements.length)] : "Building innovative solutions";

// Helper function to convert techStack object to TreeOutput format
function convertTechStackToTreeItems(techStack: { [category: string]: string[] }) {
  if (Object.keys(techStack).length === 0) {
    // Default skills tree structure
    return [
      {
        name: 'frontend/',
        type: 'directory' as const,
        children: [
          { name: 'javascript.js', type: 'file' as const, extension: 'js' },
          { name: 'typescript.ts', type: 'file' as const, extension: 'ts' },
          { name: 'react.jsx', type: 'file' as const, extension: 'jsx' },
          { name: 'nextjs.js', type: 'file' as const, extension: 'js' },
          { name: 'astro.astro', type: 'file' as const, extension: 'astro' },
          { name: 'vue.vue', type: 'file' as const, extension: 'vue' }
        ]
      },
      {
        name: 'backend/',
        type: 'directory' as const,
        children: [
          { name: 'nodejs.js', type: 'file' as const, extension: 'js' },
          { name: 'python.py', type: 'file' as const, extension: 'py' },
          { name: 'django.py', type: 'file' as const, extension: 'py' },
          { name: 'express.js', type: 'file' as const, extension: 'js' },
          { name: 'fastapi.py', type: 'file' as const, extension: 'py' }
        ]
      },
      {
        name: 'database/',
        type: 'directory' as const,
        children: [
          { name: 'postgresql.sql', type: 'file' as const, extension: 'sql' },
          { name: 'mongodb.js', type: 'file' as const, extension: 'js' },
          { name: 'redis.conf', type: 'file' as const, extension: 'conf' },
          { name: 'sqlite.db', type: 'file' as const, extension: 'db' }
        ]
      },
      {
        name: 'devops/',
        type: 'directory' as const,
        children: [
          { name: 'docker.yml', type: 'file' as const, extension: 'yml' },
          { name: 'aws.tf', type: 'file' as const, extension: 'tf' },
          { name: 'cicd.yml', type: 'file' as const, extension: 'yml' },
          { name: 'git.config', type: 'file' as const, extension: 'config' },
          { name: 'vercel.json', type: 'file' as const, extension: 'json' }
        ]
      }
    ];
  }

  // Convert dynamic techStack to tree format
  return Object.entries(techStack).map(([category, skillList]) => ({
    name: `${category.toLowerCase().replace(/\s+/g, '-')}/`,
    type: 'directory' as const,
    children: skillList.map(skill => ({
      name: `${skill.toLowerCase().replace(/\s+/g, '-')}.${getSkillExtension(skill)}`,
      type: 'file' as const,
      extension: getSkillExtension(skill)
    }))
  }));
}

// Helper function to determine file extension based on skill name
function getSkillExtension(skill: string): string {
  const skillLower = skill.toLowerCase();
  if (skillLower.includes('javascript') || skillLower.includes('js') || skillLower.includes('react') || skillLower.includes('vue') || skillLower.includes('angular')) return 'js';
  if (skillLower.includes('typescript') || skillLower.includes('ts')) return 'ts';
  if (skillLower.includes('python') || skillLower.includes('django') || skillLower.includes('fastapi')) return 'py';
  if (skillLower.includes('sql') || skillLower.includes('postgres') || skillLower.includes('mysql')) return 'sql';
  if (skillLower.includes('json')) return 'json';
  if (skillLower.includes('yaml') || skillLower.includes('yml')) return 'yml';
  if (skillLower.includes('markdown') || skillLower.includes('md')) return 'md';
  if (skillLower.includes('astro')) return 'astro';
  if (skillLower.includes('vue')) return 'vue';
  return 'conf';
}

const skillsTreeItems = convertTechStackToTreeItems(techStack);
const totalDirs = skillsTreeItems.length;
const totalFiles = skillsTreeItems.reduce((total, dir) => total + (dir.children?.length || 0), 0);

// Grid ASCII builder for precise alignment
const ASCII_ROWS = 7;
const ASCII_COLS = 5;
const LETTER_SPACING = 1;
const letterPatterns: Record<string, string[]> = {
  A: [
    '01110',
    '10001',
    '10001',
    '11111',
    '10001',
    '10001',
    '10001',
  ],
  M: [
    '10001',
    '11011',
    '10101',
    '10001',
    '10001',
    '10001',
    '10001',
  ],
  R: [
    '11110',
    '10001',
    '10001',
    '11110',
    '10100',
    '10010',
    '10001',
  ],
  I: [
    '11111',
    '00100',
    '00100',
    '00100',
    '00100',
    '00100',
    '11111',
  ],
  T: [
    '11111',
    '00100',
    '00100',
    '00100',
    '00100',
    '00100',
    '00100',
  ],
  H: [
    '10001',
    '10001',
    '10001',
    '11111',
    '10001',
    '10001',
    '10001',
  ],
};

function buildAsciiGrid(name: string) {
  const text = name.toUpperCase();
  let colOffset = 1;
  const colors = ['c-cyan', 'c-purple', 'c-green', 'c-blue', 'c-yellow', 'c-red', 'c-cyan'];
  // Include timestamps to vary pattern across loads
  const symbolsBase = ['#', '●', '■', '◆', '▣', '▤', '✶', '▓', '@', '%', '&'];
  const startSeed = Date.now() % 97;
  const symbols = symbolsBase.slice(startSeed % symbolsBase.length).concat(symbolsBase.slice(0, startSeed % symbolsBase.length));
  const cells: { row: number; col: number; color: string; ch: string }[] = [];
  for (const ch of text) {
    const pattern = letterPatterns[ch] || letterPatterns['I'];
    for (let r = 0; r < ASCII_ROWS; r++) {
      const rowStr = pattern[r];
      for (let c = 0; c < ASCII_COLS; c++) {
        if (rowStr[c] === '1') {
          const sym = symbols[(startSeed + r * 7 + c * 3 + colOffset) % symbols.length];
          cells.push({ row: r + 1, col: colOffset + c, color: colors[r % colors.length], ch: sym });
        }
      }
    }
    colOffset += ASCII_COLS + LETTER_SPACING;
  }
  const totalCols = colOffset - LETTER_SPACING;
  return { cells, totalCols };
}
---

{fragmentOnly ? (
  <div data-terminal-fragment>
    <!-- About Section -->
    <div class="prompt">
      <span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command">cat about.json</span>
    </div>
    <div class="output">
      <div class="json-output">
<span class="json-brace">&#123;</span>
  <span class="json-key">"name"</span>: <span class="json-string">"{title}"</span>,
  <span class="json-key">"role"</span>: <span class="json-string">"Full-Stack Developer"</span>,
  <span class="json-key">"description"</span>: <span class="json-string">"{description}"</span>,
  <span class="json-key">"achievements"</span>: <span class="json-string">"{randomAchievement}"</span>,
  <span class="json-key">"experience"</span>: <span class="json-string">"{stats.yearsOfExperience || 6}+ years"</span>,
  <span class="json-key">"status"</span>: <span class="json-string">"Available for new opportunities"</span>
<span class="json-brace">&#125;</span>
      </div>
    </div>

    <!-- Navigation Commands -->
    <div class="prompt">
      <span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command">ls -la</span>
    </div>
    <div class="output">
      <LsOutput items={homeDirectoryItems} />
    </div>

    <!-- Dynamic Skills Section with TreeOutput Component -->
    <div class="prompt">
      <span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command">tree skills/</span>
    </div>
    <div class="output">
      <TreeOutput 
        items={skillsTreeItems} 
        title="skills/"
        totalDirs={totalDirs}
        totalFiles={totalFiles}
      />
    </div>

    <!-- Projects Section -->
    <div class="prompt">
      <span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~/projects</span><span class="symbol">$</span><span class="command">ls -lta</span>
    </div>
    <div class="output">
      <LsOutput items={projectItems} totalSize={stats.projectsCompleted || 24} />
    </div>

    <!-- Stats Section -->
    <div class="prompt">
      <span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command">cat stats.json</span>
    </div>
    <div class="output">
      <div class="json-output">
<span class="json-brace">&#123;</span>
  <span class="json-key">"projects_completed"</span>: <span class="json-number">{stats.projectsCompleted || 25}</span>,
  <span class="json-key">"technologies_used"</span>: <span class="json-number">{stats.technologiesUsed || 30}</span>,
  <span class="json-key">"years_experience"</span>: <span class="json-number">{stats.yearsOfExperience || 6}</span>,
  <span class="json-key">"certifications"</span>: <span class="json-number">{stats.certifications || 2}</span>,
  <span class="json-key">"awards"</span>: <span class="json-number">{stats.awards || 4}</span>
<span class="json-brace">&#125;</span>
      </div>
    </div>

    <!-- Contact Section -->
    <div class="prompt">
      <span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command">cat contact.json</span>
    </div>
    <div class="output">
      <div class="json-output">
<span class="json-brace">&#123;</span>
  <span class="json-key">"email"</span>: <span class="json-string">"{contact.email || 'hello@amrithnath.com'}"</span>,
  <span class="json-key">"github"</span>: <span class="json-string">"{contact.github || 'github.com/amrithnath'}"</span>,
  <span class="json-key">"linkedin"</span>: <span class="json-string">"{contact.linkedin || 'linkedin.com/in/amrithnath'}"</span>,
  <span class="json-key">"website"</span>: <span class="json-string">"amrithnath.com"</span>
<span class="json-brace">&#125;</span>
      </div>
    </div>

    <!-- System Status -->
    <div class="prompt">
      <span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command">uptime</span>
    </div>
    <div class="output">
      <div class="command-output">14:30  up {terminal.systemInfo?.uptime || '365 days'}, 12:45, 1 user, load averages: {terminal.systemInfo?.load || '0.52 0.48 0.51'}</div>
    </div>

    <!-- System Information -->
    <div class="prompt">
      <span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command">uname -a</span>
    </div>
    <div class="output">
      <div class="command-output">Darwin portfolio.local 24.2.0 Darwin Kernel Version 24.2.0: Fri Dec  6 18:51:28 PST 2024; root:xnu-11215.61.5~2/RELEASE_ARM64_T6000 arm64 M1 Pro</div>
    </div>

    <div class="prompt">
      <span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command">cat .ghostty</span>
    </div>
    <div class="output">
      <div class="command-output"># Ghostty Terminal Configuration
# Fast, feature-rich terminal emulator
# Using Catppuccin Mocha theme
theme = "catppuccin-mocha"
font-family = "JetBrains Mono"
font-size = 14</div>
    </div>

    <div class="prompt">
      <span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command">echo "Thanks for visiting! 🚀"</span>
    </div>
    <div class="output">
      <div class="command-output">Thanks for visiting! 🚀</div>
    </div>
  </div>
) : (
<div class="terminal-view">
  <div class="terminal-container">
    <div class="window">

      <div class="terminal">
        
        { !suppressHeader && (
          <>
        <!-- System Info -->
        <div class="command-output">Last login: {new Date().toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' })} on ttys000</div>
        
        <!-- Welcome Section -->
        <div class="prompt">
          <span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command">whoami</span>
        </div>
        <div class="output">
          <div class="command-output">amrith</div>
        </div>
          </>
        )}
        
        {renderMode === 'minimal' ? (
          <>
            <div class="prompt">
              <span class="user">root</span><span class="symbol">@</span><span class="host">boot</span><span class="symbol">:</span><span class="path">/usr/bin</span><span class="symbol">$</span><span class="command">/sbin/init --system</span>
            </div>
            <div class="output"><div class="command-output">[  OK  ] Started terminal environment.</div></div>

            <div class="prompt">
              <span class="user">root</span><span class="symbol">@</span><span class="host">boot</span><span class="symbol">:</span><span class="path">/usr/bin</span><span class="symbol">$</span><span class="command">login amrith</span>
            </div>
            <div class="output"><div class="command-output">Welcome, amrith</div></div>

            <div class="prompt">
              <span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command">neofetch</span>
            </div>
            <div class="output">
              <div class="neofetch">
                {(() => {
                  const grid = buildAsciiGrid('AMRITH');
                  return (
                    <div class="nf-ascii nf-grid" style={`--cols:${grid.totalCols};--px:16px;`} role="img" aria-label="AMRITH ASCII">
                      {Array.from({ length: 7 * grid.totalCols }).map((_, i) => {
                        const row = Math.floor(i / grid.totalCols) + 1;
                        const col = (i % grid.totalCols) + 1;
                        const fg = grid.cells.find(c => c.row === row && c.col === col);
                        if (fg) {
                          return <span class={`px ${fg.color}`} style={`grid-row:${row};grid-column:${col};`}>{fg.ch}</span>;
                        }
                        // background pixel (order-in-chaos)
                        const bgCh = ['·', '•', '+', '∙', '⋅'][i % 5];
                        const bgColor = ['c-blue', 'c-purple', 'c-cyan', 'c-green'][row % 4];
                        return <span class={`px bg ${bgColor}`} style={`grid-row:${row};grid-column:${col};`}>{bgCh}</span>;
                      })}
                    </div>
                  );
                })()}
                <div class="nf-name">TECHNOLOGIST</div>
                <div class="nf-row"><span class="nf-key k-cyan">Role</span><span class="nf-sep">:</span><span class="nf-value v-cyan">Full‑Stack Developer</span> <span class="nf-sep">•</span> <span class="nf-value v-purple">API & Solutions Engineer</span></div>
                <div class="nf-row"><span class="nf-key k-green">Focus</span><span class="nf-sep">:</span><span class="nf-value v-green">Astro</span> <span class="nf-sep">•</span> <span class="nf-value v-blue">TypeScript</span> <span class="nf-sep">•</span> <span class="nf-value v-yellow">AWS</span></div>
                <div class="nf-row"><span class="nf-key k-magenta">About</span><span class="nf-sep">:</span><span class="nf-value v-fg">{description}</span></div>
              </div>
            </div>

            <!-- banner intentionally removed on landing -->

            <div class="prompt">
              <span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command">uptime</span>
            </div>
            <div class="output"><div class="command-output">up {terminal.systemInfo?.uptime || '321 days'}, load {terminal.systemInfo?.load || '0.95 0.23 1.83'}</div></div>

            <div class="prompt">
              <span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command">echo $TECH_STACK | tr ':' '\n'</span>
            </div>
            <div class="output"><div class="command-output">JavaScript
TypeScript
Node.js
Astro
AWS
Docker</div></div>
<div class="prompt">
  <span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command"></span>
</div>
          </>
        ) : (
          <></>
        )}

        {renderMode === 'full' && !suppressAbout && (
          <div data-terminal-fragment>
        <!-- About Section -->
        <div class="prompt">
          <span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command">whereis amrith</span>
        </div>
        <div class="output">
          <div class="command-output">amrith: /home/amrith /usr/local/bangalore /usr/share/india</div>
        </div>
        <div class="prompt">
          <span class="user">amrith</span><span class="symbol">@</span><span 
          class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command">cat .banner</span>
        </div>
        <div class="output">
          <div class="ascii-art">
╔═══════════════════════════════════════╗
║          AMRITHNATH VIJAYAKUMAR       ║
║     Full-Stack Developer & Creator    ║
╚═══════════════════════════════════════╝
          </div>
        </div>

        <div class="prompt">
          <span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command">cat about.json</span>
        </div>
        <div class="output">
          <div class="json-output">
<span class="json-brace">&#123;</span>
  <span class="json-key">"name"</span>: <span class="json-string">"{title}"</span>,
  <span class="json-key">"role"</span>: <span class="json-string">"Full-Stack Developer"</span>,
  <span class="json-key">"description"</span>: <span class="json-string">"{description}"</span>,
  <span class="json-key">"achievements"</span>: <span class="json-string">"{randomAchievement}"</span>,
  <span class="json-key">"experience"</span>: <span class="json-string">"{stats.yearsOfExperience || 6}+ years"</span>,
  <span class="json-key">"status"</span>: <span class="json-string">"Available for new opportunities"</span>
<span class="json-brace">&#125;</span>
          </div>
        </div>

        <!-- Navigation Commands -->
        <div class="prompt">
          <span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command">ls -la</span>
        </div>
        <div class="output">
          <LsOutput items={homeDirectoryItems} />
        </div>

        <!-- Dynamic Skills Section with TreeOutput Component -->
        <div class="prompt">
          <span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command">tree skills/</span>
        </div>
        <div class="output">
          <TreeOutput 
            items={skillsTreeItems} 
            title="skills/"
            totalDirs={totalDirs}
            totalFiles={totalFiles}
          />
        </div>

        <!-- Projects Section -->
        <div class="prompt">
          <span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~/projects</span><span class="symbol">$</span><span class="command">ls -lta</span>
        </div>
        <div class="output">
          <LsOutput items={projectItems} totalSize={stats.projectsCompleted || 24} />
        </div>

        <!-- Stats Section -->
        <div class="prompt">
          <span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command">cat stats.json</span>
        </div>
        <div class="output">
          <div class="json-output">
<span class="json-brace">&#123;</span>
  <span class="json-key">"projects_completed"</span>: <span class="json-number">{stats.projectsCompleted || 25}</span>,
  <span class="json-key">"technologies_used"</span>: <span class="json-number">{stats.technologiesUsed || 30}</span>,
  <span class="json-key">"years_experience"</span>: <span class="json-number">{stats.yearsOfExperience || 6}</span>,
  <span class="json-key">"certifications"</span>: <span class="json-number">{stats.certifications || 2}</span>,
  <span class="json-key">"awards"</span>: <span class="json-number">{stats.awards || 4}</span>
<span class="json-brace">&#125;</span>
          </div>
        </div>

        <!-- Contact Section -->
        <div class="prompt">
          <span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command">cat contact.json</span>
        </div>
        <div class="output">
          <div class="json-output">
<span class="json-brace">&#123;</span>
  <span class="json-key">"email"</span>: <span class="json-string">"{contact.email || 'hello@amrithnath.com'}"</span>,
  <span class="json-key">"github"</span>: <span class="json-string">"{contact.github || 'github.com/amrithnath'}"</span>,
  <span class="json-key">"linkedin"</span>: <span class="json-string">"{contact.linkedin || 'linkedin.com/in/amrithnath'}"</span>,
  <span class="json-key">"website"</span>: <span class="json-string">"amrithnath.com"</span>
<span class="json-brace">&#125;</span>
          </div>
        </div>

        <!-- System Status -->
        <div class="prompt">
          <span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command">uptime</span>
        </div>
        <div class="output">
          <div class="command-output">14:30  up {terminal.systemInfo?.uptime || '365 days'}, 12:45, 1 user, load averages: {terminal.systemInfo?.load || '0.52 0.48 0.51'}</div>
        </div>

        <!-- System Information -->
        <div class="prompt">
          <span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command">uname -a</span>
        </div>
        <div class="output">
          <div class="command-output">Darwin portfolio.local 24.2.0 Darwin Kernel Version 24.2.0: Fri Dec  6 18:51:28 PST 2024; root:xnu-11215.61.5~2/RELEASE_ARM64_T6000 arm64 M1 Pro</div>
        </div>
        
        <div class="prompt">
          <span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command">cat .ghostty</span>
        </div>
        <div class="output">
          <div class="command-output"># Ghostty Terminal Configuration
# Fast, feature-rich terminal emulator
# Using Catppuccin Mocha theme
theme = "catppuccin-mocha"
font-family = "JetBrains Mono"
font-size = 14</div>
        </div>
        
        <div class="prompt">
          <span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command">echo "Thanks for visiting! 🚀"</span>
        </div>
        <div class="output">
          <div class="command-output">Thanks for visiting! 🚀</div>
        </div>
          </div>
        )}

        { includeFooter ? (
          <>
            <div class="prompt"><span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command">printf "Thanks for visiting!\n"</span></div>
            <div class="output"><div class="command-output">Thanks for visiting!</div></div>
            <div class="prompt"><span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command">uname -srv</span></div>
            <div class="output"><div class="command-output">Astro/Terminal v1.0 — © {new Date().getFullYear()} Amrith — All rights reserved</div></div>
            <div class="prompt"><span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="command">echo "Made with ❤  using Astro"</span></div>
            <div class="output"><div class="command-output">Made with ❤  using Astro</div></div>
            <div class="prompt"><span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="cursor">█</span></div>
          </>
        ) : (
          showFinalCursor && (
        <div class="prompt">
          <span class="user">amrith</span><span class="symbol">@</span><span class="host">portfolio</span><span class="symbol">:</span><span class="path">~</span><span class="symbol">$</span><span class="cursor">█</span>
        </div>
          )
        )}
      </div>
    </div>
  </div>
</div> 
</div> 
)}