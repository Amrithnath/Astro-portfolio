---
// Component Imports
import MainHead from '../components/MainHead.astro';
import TerminalView from '../components/TerminalView.astro';
import '../styles/global.css';
// Resolve built CSS asset URLs so the browser gets proper text/css (avoid MIME errors)
import personalThemeHref from '../styles/personal-theme.css?url';
import professionalThemeHref from '../styles/professional-theme.css?url';
import transitionsHref from '../styles/theme-transitions.css?url';

// Dynamic data service
import { generateSeededLandingData } from '../data/landing-data-service';

// Data Fetching: List all Markdown posts in the repo.
const projects = await Astro.glob('./project/**/*.md');

// Generate dynamic data from resume compendium
const dynamicData = generateSeededLandingData();

// Combine projects with dynamic project data
const allProjects = [
  ...projects,
  ...dynamicData.projects.map(project => ({
    frontmatter: {
      title: project.name,
      description: project.description,
      tags: project.technologies,
      demo: project.demo,
      github: project.github,
      type: project.type,
      status: project.status
    },
    url: `/project/${project.id}`,
    title: project.name
  }))
];

// Portfolio data with dynamic content
const portfolioData = {
  title: dynamicData.name,
  description: dynamicData.description,
  projects: allProjects,
  skills: dynamicData.skills,
  techStack: dynamicData.techStack,
  contact: dynamicData.contact,
  achievements: dynamicData.achievements,
  interests: dynamicData.interests,
  stats: dynamicData.stats,
  terminal: dynamicData.terminal,
  currentRole: dynamicData.currentRole
};

// CSS Imports (critical path only)
import '../styles/terminal-theme.css';
---

<html lang="en" class="theme-terminal">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta name="description" content={`${dynamicData.name}'s portfolio - ${dynamicData.description}`}>
		<MainHead
			title={`${dynamicData.name} - ${dynamicData.title}`}
			description={dynamicData.description}
		/>
	</head>
    <body class="theme-terminal">
        <!-- Terminal Theme: minimal first paint -->
        <div class="terminal-nav">
          <div class="window-header">
            <div class="window-controls"><div class="control close"></div><div class="control minimize"></div><div class="control maximize"></div></div>
            <div class="window-title">amrith@portfolio:~ ‚Äî ghostty ‚Äî 120√ó30</div>
          </div>
          <div class="terminal-tabs">
            <a href="/" class="tab active" aria-current="page"><span class="tab-icon">‚óè</span><span class="tab-title">portfolio.sh</span><span class="tab-close">‚úï</span></a>
            <a href="/about" class="tab"><span class="tab-icon">‚óã</span><span class="tab-title">about.md</span><span class="tab-close">‚úï</span></a>
            <a href="/projects" class="tab"><span class="tab-icon">‚óã</span><span class="tab-title">projects.json</span><span class="tab-close">‚úï</span></a>
            <a href="/resume" class="tab"><span class="tab-icon">‚óã</span><span class="tab-title">resume.py</span><span class="tab-close">‚úï</span></a>
            <a href="/blog" class="tab"><span class="tab-icon">‚óã</span><span class="tab-title">blog.log</span><span class="tab-close">‚úï</span></a>
            <div class="tab-add">+</div>
          </div>
          <div class="terminal-status">
            <div class="status-left"><span class="branch">üìÅ ~/portfolio</span><span class="git-branch">git:(main)</span><span class="status-indicator">‚úì</span></div>
            <div class="status-right"><span class="terminal-mode">INSERT</span><span class="position">Ln 1, Col 1</span></div>
          </div>
        </div>
		<TerminalView 
			title={portfolioData.title}
			description={portfolioData.description}
			projects={portfolioData.projects}
			skills={portfolioData.skills}
			techStack={portfolioData.techStack}
			contact={portfolioData.contact}
			achievements={portfolioData.achievements}
			terminal={portfolioData.terminal}
			stats={portfolioData.stats}
            renderMode="minimal"
            suppressHeader={true}
            suppressAbout={true}
            suppressBanner={true}
            showFinalCursor={false}
            includeFooter={true}
        />


        <!-- Defer non-critical themes and full terminal content until after load -->
        <script is:inline>
          window.addEventListener('load', () => {
            const hydrate = async () => {
              try {
                // Randomize ASCII symbols per page view
                (function randomizeAscii(){
                  const grid = document.querySelector('.nf-grid');
                  if (!grid) return;
                  const symbols = ['#','‚óè','‚ñ†','‚óÜ','‚ñ£','‚ñ§','‚ú∂','‚ñì','@','%','&'];
                  const seed = (performance.now()|0) % symbols.length;
                  const pool = symbols.slice(seed).concat(symbols.slice(0, seed));
                  grid.querySelectorAll('.px:not(.bg)').forEach((el, idx) => {
                    el.textContent = pool[(seed + idx*3) % pool.length];
                  });
                })();
                // Load non-critical CSS lazily (use built asset URLs to avoid MIME/type issues)
                const styles = [
                  ${JSON.stringify(transitionsHref)},
                  ${JSON.stringify(professionalThemeHref)},
                  ${JSON.stringify(personalThemeHref)}
                ];
                styles.forEach(href => {
                  const link = document.createElement('link');
                  link.rel = 'stylesheet';
                  link.href = href;
                  link.media = 'print';
                  link.onload = () => { link.media = 'all'; };
                  document.head.appendChild(link);
                });

                // Fetch full terminal HTML fragment and replace minimal content
                const res = await fetch('/terminal-full/?suppressHeader=1&suppressAbout=1', { credentials: 'same-origin' });
                if (res.ok) {
                  const html = await res.text();
                  const container = document.querySelector('.terminal');
                  if (container) {
                    // Keep the first few lines already present, append the rest
                    const wrapper = document.createElement('div');
                    wrapper.innerHTML = html;
                    const fragment = wrapper.querySelector('[data-terminal-fragment]');
                    if (fragment) container.appendChild(fragment);
                  }
                }

                // Load preferred font (Fira Code) after first paint to unify typography
                const fira = document.createElement('link');
                fira.rel = 'stylesheet';
                fira.href = 'https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;600&display=swap';
                document.head.appendChild(fira);
              } catch (e) {
                console.warn('Deferred hydration failed', e);
              }
            };
            // Slight delay to not compete with LCP
            setTimeout(hydrate, 50);
          });
        </script>
	</body>
</html>
